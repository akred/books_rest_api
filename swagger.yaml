swagger: "2.0"
info:
  description: "Simple Books rest API, using php symfony. For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Books rest API"
  termsOfService: "https://github.com/akred/books_rest_api"
basePath: "/v2"
tags:
  - name: "book"
    description: "Access to your books"
  - name: "library"
    description: "Access to your libraires"
  - name: "user"
    description: "Operations about user"
schemes:
  - "https"
  - "http"
paths:
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      operationId: "getUserByName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /book:
    post:
      tags:
        - "book"
      summary: "Add a new book"
      operationId: "addBook"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Book object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        "405":
          description: "Invalid input"
      security:
        - bookstore_auth:
            - "write:books"
            - "read:books"
    put:
      tags:
        - "book"
      summary: "Update an existing book"
      operationId: "updateBook"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Book object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
        "405":
          description: "Validation exception"
      security:
        - bookstore_auth:
            - "write:books"
            - "read:books"
  /book/findAll:
    get:
      tags:
        - "book"
      summary: "Retrieve all the books"
      description: "Retrieve all the books"
      operationId: "findAllBooks"
      produces:
        - "application/xml"
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "400":
          description: "Invalid status value"
      security:
        - bookstore_auth:
            - "write:books"
            - "read:books"
  /book/{bookId}:
    get:
      tags:
        - "book"
      summary: "Find book by ID"
      description: "Returns a single book"
      operationId: "getBookById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "bookId"
          in: "path"
          description: "ID of book to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
      security:
        - api_key: []
    post:
      tags:
        - "book"
      summary: "Updates a book with form data"
      operationId: "updateBookWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "bookId"
          in: "path"
          description: "ID of book that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "title"
          in: "formData"
          description: "Updated name of the book"
          required: false
          type: "string"
        - name: "author"
          in: "formData"
          description: "Updated author of the book"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
        - bookstore_auth:
            - "write:books"
            - "read:books"
    delete:
      tags:
        - "book"
      summary: "Deletes a book"
      operationId: "deleteBook"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "bookId"
          in: "path"
          description: "Book id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
      security:
        - bookstore_auth:
            - "write:books"
            - "read:books"
  /library:
    post:
      tags:
        - "library"
      summary: "Add a new library"
      operationId: "addLibrary"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Library object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Library"
      responses:
        "405":
          description: "Invalid input"
      security:
        - bookstore_auth:
            - "write:books"
            - "read:books"
    put:
      tags:
        - "library"
      summary: "Update an existing library"
      operationId: "updateLibrary"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Library object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Library"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Library not found"
        "405":
          description: "Validation exception"
      security:
        - bookstore_auth:
            - "write:books"
            - "read:books"
  /library/findAll:
    get:
      tags:
        - "library"
      summary: "Retrieve all the libraries"
      description: "Retrieve all the libraries"
      operationId: "findAllLibraries"
      produces:
        - "application/xml"
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Library"
        "400":
          description: "Invalid status value"
      security:
        - bookstore_auth:
            - "write:books"
            - "read:books"
  /library/{libraryId}:
    get:
      tags:
        - "library"
      summary: "Find library by ID"
      description: "Returns a single library"
      operationId: "getLibraryById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "libraryId"
          in: "path"
          description: "ID of library to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Library"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Library not found"
      security:
        - api_key: []
    post:
      tags:
        - "library"
      summary: "Updates a library with form data"
      operationId: "updateLibraryWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "libraryId"
          in: "path"
          description: "ID of library that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the library"
          required: false
          type: "string"
        - name: "city"
          in: "formData"
          description: "Updated city of the library"
          required: false
          type: "string"
        - name: "country"
          in: "formData"
          description: "Updated country of the library"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
        - bookstore_auth:
            - "write:books"
            - "read:books"
    delete:
      tags:
        - "library"
      summary: "Deletes a library"
      operationId: "deleteLibrary"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "libraryId"
          in: "path"
          description: "Library id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Library not found"
      security:
        - bookstore_auth:
            - "write:books"
            - "read:books"
securityDefinitions:
  bookstore_auth:
    type: "oauth2"
    authorizationUrl: "http://bookstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:books: "modify your books"
      read:books: "read your books"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    required:
      - "username"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstname:
        type: "string"
      lastname:
        type: "string"
      books:
        type: array
        items:
          $ref: "#/definitions/Book"
    xml:
      name: "User"
  Book:
    type: "object"
    required:
      - "title"
      - "author"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "Harry Potter and the magic light"
      author:
        type: "string"
        example: "JK Rowling"
      librairies:
        type: array
        items:
          $ref: "#/definitions/Library"
    xml:
      name: "Book"
  Library:
    type: "object"
    required:
      - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
    xml:
      name: "Library"
